name: workflow.yml
on:
  push:
    branches:
      - master

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate results of code analysis

      - name: Install required tools
        # Write the commands to install ReportGenerator and Stryker into your pipeline.
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-stryker

      - name: Set up .env
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
    
  

      - name: Run Docker Compose
        run: |
            docker-compose -f docker compose.yml up -d
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        
  
      - name: Wait for Database to be Ready
        run: |
            sleep 10 # Wait a few seconds for MariaDB to initialize 

      - name: Run unit tests
        # Write a command to execute unit tests while collecting code coverage
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults
        
      - name: Generate report
        # Use the ReportGenerator tool to generate a report from the code coverage results
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" -targetdir:coverage-report -reporttypes:Html

      - name: Run Mutation Tests 
      # Write a command to execute mutation tests using Stryker with a threshold of 80% mutation score
        run: |
          dotnet stryker --break-at 80
       
        # Complete this step sp it uploads the coverage report to the artifacts - make it run always even if previous steps fail
      - name: Collect Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage
          path: coverage-report

        
       
        # Complete this step so it uploads the Stryker report to the artifacts - make it run always even if previous steps fail
      - name: Collect Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: StrykerReport
          path: StrykerOutput
        
    